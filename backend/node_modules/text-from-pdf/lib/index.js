"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pdfToText = void 0;
var fs_1 = __importDefault(require("@supercharge/fs"));
var fs_2 = __importDefault(require("fs"));
var jimp_1 = __importDefault(require("jimp"));
var node_poppler_1 = require("node-poppler");
var tesseract_js_1 = __importDefault(require("tesseract.js"));
var util_1 = __importDefault(require("util"));
var utils_1 = require("./utils/utils");
var readline = __importStar(require("readline"));
function convertPdfToPng(inputFileName, outputFileName, options, path) {
    return __awaiter(this, void 0, void 0, function () {
        var poppler;
        return __generator(this, function (_a) {
            if (path) {
                poppler = new node_poppler_1.Poppler(path);
            }
            else if (process.platform === 'darwin') {
                poppler = new node_poppler_1.Poppler('/usr/local/Cellar/poppler/21.12.0/bin');
            }
            else if (process.platform === 'linux') {
                poppler = new node_poppler_1.Poppler('/usr/bin');
            }
            else {
                poppler = new node_poppler_1.Poppler();
            }
            return [2 /*return*/, poppler.pdfToCairo(inputFileName, outputFileName, options)];
        });
    });
}
function flipImage(page, outputFileName, rotationDegree) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, jimp_1.default.read("".concat(outputFileName, "-").concat(page, ".png")).then(function (image) {
                        image
                            .rotate(rotationDegree, jimp_1.default.RESIZE_BEZIER, function (err) {
                            if (err)
                                throw err;
                        })
                            .write("".concat(outputFileName, "-").concat(page, ".png"));
                    })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
/**
 * Description: The Pdf to Text function
 * @param inputFileName: The full path to the PDF file to be converted to text
 * @param options: An object containing  properties as described in the IConversionOptions interface
 */
function pdfToText(inputFileName, options) {
    var _a, _b, _c, _d, _e;
    return __awaiter(this, void 0, void 0, function () {
        var finalText, imageOptions, outputFileName, makeDir, _loop_1, i;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    finalText = [];
                    imageOptions = {
                        firstPageToConvert: (_a = options === null || options === void 0 ? void 0 : options.firstPageToConvert) !== null && _a !== void 0 ? _a : 1,
                        lastPageToConvert: (_b = options === null || options === void 0 ? void 0 : options.lastPageToConvert) !== null && _b !== void 0 ? _b : 1,
                        pngFile: true,
                    };
                    outputFileName = "".concat(process.cwd(), "/images/").concat(inputFileName.replace(/^.*[\\\/]/, '').split('.pdf')[0]);
                    makeDir = util_1.default.promisify(fs_2.default.mkdir);
                    return [4 /*yield*/, fs_1.default.exists("".concat(process.cwd(), "/images/"))];
                case 1:
                    if (!!(_f.sent())) return [3 /*break*/, 3];
                    return [4 /*yield*/, makeDir("".concat(process.cwd(), "/images/"))];
                case 2:
                    _f.sent();
                    _f.label = 3;
                case 3: return [4 /*yield*/, convertPdfToPng(inputFileName, outputFileName, imageOptions, options === null || options === void 0 ? void 0 : options.popplerFullPath)];
                case 4:
                    _f.sent();
                    _loop_1 = function (i) {
                        return __generator(this, function (_g) {
                            switch (_g.label) {
                                case 0: return [4 /*yield*/, flipImage(i, outputFileName, (_d = options === null || options === void 0 ? void 0 : options.rotationDegree) !== null && _d !== void 0 ? _d : 0)];
                                case 1:
                                    _g.sent();
                                    return [4 /*yield*/, tesseract_js_1.default.recognize("".concat(outputFileName, "-").concat(i, ".png"), (_e = options === null || options === void 0 ? void 0 : options.language) !== null && _e !== void 0 ? _e : 'eng', (options === null || options === void 0 ? void 0 : options.enableProgressLogging)
                                            ? {
                                                logger: function (m) {
                                                    if (m.progress !== 1) {
                                                        readline.clearLine(process.stdout, 0);
                                                        process.stdout.write('\u001b[3J\u001b[2J\u001b[1J');
                                                        // tslint:disable-next-line:no-console
                                                        console.clear();
                                                        process.stdout.write("Text recognition progress for page ".concat(i, ": ").concat((0, utils_1.progressbar)(m.progress), "%"));
                                                    }
                                                },
                                            }
                                            : { logger: function () { return null; } }).then(function (_a) {
                                            var text = _a.data.text;
                                            finalText.push(text);
                                        })];
                                case 2:
                                    _g.sent();
                                    return [2 /*return*/];
                            }
                        });
                    };
                    i = (_c = imageOptions.firstPageToConvert) !== null && _c !== void 0 ? _c : 1;
                    _f.label = 5;
                case 5:
                    if (!(i <= imageOptions.firstPageToConvert + (imageOptions.lastPageToConvert - imageOptions.firstPageToConvert))) return [3 /*break*/, 8];
                    return [5 /*yield**/, _loop_1(i)];
                case 6:
                    _f.sent();
                    _f.label = 7;
                case 7:
                    i++;
                    return [3 /*break*/, 5];
                case 8: return [2 /*return*/, finalText.join('\n')];
            }
        });
    });
}
exports.pdfToText = pdfToText;
